{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/saad/Desktop/Learning/Amazon Clone/amazon-clone/src/Payment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport CartItem from \"./CartItem\";\nimport \"./Payment.css\";\nimport { useStateValue } from \"./StateProvider\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport CurrencyFormat from \"react-currency-format\";\nimport { getCartTotal } from \"./reducer\";\nimport axios from \"./axios\";\nimport { useHistory } from \"react-router-dom\";\nimport { db } from \"./firebase\";\n\nfunction Payment() {\n  _s();\n\n  const [{\n    cart,\n    user\n  }, dispatch] = useStateValue();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [error, setError] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isDisabled, setIsDisabled] = useState(true);\n  const [hasSucceeded, setHasSucceeded] = useState(false);\n  const [clientSecret, setClientSecret] = useState(true);\n  const history = useHistory();\n  useEffect(() => {\n    /*stripe secret allows us to charge the customer. Need to generate everytime the cart changes. \n    Tells stripe something like \"Hey, I need to charge the customer $50\"*/\n    const getClientSecret = async () => {\n      const response = await axios({\n        method: \"post\",\n        //Stripe expects the currency in sub-units. So for dollars, it expects the total value in cents.\n        url: `/payments/create?total=${Math.round(getCartTotal(cart) * 100)}`\n      }); //   console.log(\"Data = \", response);\n\n      setClientSecret(response.data.clientSecret);\n    };\n\n    getClientSecret();\n  }, [cart]); //   console.log(\"Client secret is = \", clientSecret);\n\n  const processPayment = async e => {\n    e.preventDefault();\n    setIsProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    }).then(({\n      paymentIntent\n    }) => {\n      //paymentIntent is nothing but payment confirmation. It is Stripe's fancy lingo\n      db.collection(\"users\").doc(user === null || user === void 0 ? void 0 : user.uid).collection(\"orders\").doc(paymentIntent.id).set({\n        cart: cart,\n        amount: paymentIntent.amount,\n        createdAt: paymentIntent.created\n      });\n      setHasSucceeded(true);\n      setError(null);\n      setIsProcessing(false);\n      dispatch({\n        type: \"EMPTY_CART\"\n      });\n      history.replace(\"/orders\");\n    });\n  };\n\n  const handleChange = e => {\n    setIsDisabled(e.empty);\n    setError(e.error ? e.error.message : \"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"payment\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"payment__container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Checkout (\", cart === null || cart === void 0 ? void 0 : cart.length, \" items)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"payment__section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"payment__title\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Delivery Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"payment__address\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: user === null || user === void 0 ? void 0 : user.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"444 3rd Ave\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"New York, NY\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"10016\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"payment__section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"payment__title\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Review items and delivery\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"payment__items\",\n          children: cart.map(items => /*#__PURE__*/_jsxDEV(CartItem, {\n            id: items.id,\n            title: items.title,\n            price: items.price,\n            image: items.image,\n            rating: items.rating\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"payment__section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"payment__title\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Payment Method\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"payment__details\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: processPayment,\n            children: [/*#__PURE__*/_jsxDEV(CardElement, {\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"payment__priceContainer\",\n              children: [/*#__PURE__*/_jsxDEV(CurrencyFormat, {\n                renderText: value => /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                    children: [\"Order Total: $\", getCartTotal(cart)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 132,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false),\n                decimalDigits: 2,\n                displayType: \"text\",\n                thousandsSeparator: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                disabled: isProcessing || isDisabled || hasSucceeded || (cart === null || cart === void 0 ? void 0 : cart.length) == 0 || !user,\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: isProcessing ? /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: \"Processing...\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 149,\n                    columnNumber: 41\n                  }, this) : \"Buy Now\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 149,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Payment, \"flONP50q4K7Osr6tEG6PjUCwLiw=\", false, function () {\n  return [useStateValue, useStripe, useElements, useHistory];\n});\n\n_c = Payment;\nexport default Payment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Payment\");","map":{"version":3,"sources":["/Users/saad/Desktop/Learning/Amazon Clone/amazon-clone/src/Payment.js"],"names":["React","useState","useEffect","CartItem","useStateValue","CardElement","useStripe","useElements","CurrencyFormat","getCartTotal","axios","useHistory","db","Payment","cart","user","dispatch","stripe","elements","error","setError","isProcessing","setIsProcessing","isDisabled","setIsDisabled","hasSucceeded","setHasSucceeded","clientSecret","setClientSecret","history","getClientSecret","response","method","url","Math","round","data","processPayment","e","preventDefault","payload","confirmCardPayment","payment_method","card","getElement","then","paymentIntent","collection","doc","uid","id","set","amount","createdAt","created","type","replace","handleChange","empty","message","length","email","map","items","title","price","image","rating","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport CartItem from \"./CartItem\";\nimport \"./Payment.css\";\nimport { useStateValue } from \"./StateProvider\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport CurrencyFormat from \"react-currency-format\";\nimport { getCartTotal } from \"./reducer\";\nimport axios from \"./axios\";\nimport { useHistory } from \"react-router-dom\";\nimport { db } from \"./firebase\";\n\nfunction Payment() {\n  const [{ cart, user }, dispatch] = useStateValue();\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const [error, setError] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isDisabled, setIsDisabled] = useState(true);\n  const [hasSucceeded, setHasSucceeded] = useState(false);\n\n  const [clientSecret, setClientSecret] = useState(true);\n\n  const history = useHistory();\n\n  useEffect(() => {\n    /*stripe secret allows us to charge the customer. Need to generate everytime the cart changes. \n    Tells stripe something like \"Hey, I need to charge the customer $50\"*/\n    const getClientSecret = async () => {\n      const response = await axios({\n        method: \"post\",\n        //Stripe expects the currency in sub-units. So for dollars, it expects the total value in cents.\n        url: `/payments/create?total=${Math.round(getCartTotal(cart) * 100)}`,\n      });\n      //   console.log(\"Data = \", response);\n      setClientSecret(response.data.clientSecret);\n    };\n\n    getClientSecret();\n  }, [cart]);\n\n  //   console.log(\"Client secret is = \", clientSecret);\n\n  const processPayment = async (e) => {\n    e.preventDefault();\n    setIsProcessing(true);\n    const payload = await stripe\n      .confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: elements.getElement(CardElement),\n        },\n      })\n      .then(({ paymentIntent }) => {\n        //paymentIntent is nothing but payment confirmation. It is Stripe's fancy lingo\n\n        db.collection(\"users\")\n          .doc(user?.uid)\n          .collection(\"orders\")\n          .doc(paymentIntent.id)\n          .set({\n            cart: cart,\n            amount: paymentIntent.amount,\n            createdAt: paymentIntent.created,\n          });\n\n        setHasSucceeded(true);\n        setError(null);\n        setIsProcessing(false);\n\n        dispatch({\n          type: \"EMPTY_CART\",\n        });\n\n        history.replace(\"/orders\");\n      });\n  };\n\n  const handleChange = (e) => {\n    setIsDisabled(e.empty);\n    setError(e.error ? e.error.message : \"\");\n  };\n\n  return (\n    <div className=\"payment\">\n      <div className=\"payment__container\">\n        <h1>Checkout ({cart?.length} items)</h1>\n        {/* payment section - address */}\n        <div className=\"payment__section\">\n          <div className=\"payment__title\">\n            <h3>Delivery Address</h3>\n          </div>\n          <div className=\"payment__address\">\n            <p>{user?.email}</p>\n            <p>444 3rd Ave</p>\n            <p>New York, NY</p>\n            <p>10016</p>\n          </div>\n        </div>\n\n        {/* payment section - cart items */}\n        <div className=\"payment__section\">\n          <div className=\"payment__title\">\n            <h3>Review items and delivery</h3>\n          </div>\n          <div className=\"payment__items\">\n            {cart.map((items) => (\n              <CartItem\n                id={items.id}\n                title={items.title}\n                price={items.price}\n                image={items.image}\n                rating={items.rating}\n              />\n            ))}\n          </div>\n        </div>\n\n        {/* payment section - card details */}\n        <div className=\"payment__section\">\n          <div className=\"payment__title\">\n            <h3>Payment Method</h3>\n          </div>\n          <div className=\"payment__details\">\n            {/* Stripe payment */}\n            <form onSubmit={processPayment}>\n              <CardElement onChange={handleChange} />\n              <div className=\"payment__priceContainer\">\n                <CurrencyFormat\n                  renderText={(value) => (\n                    <>\n                      <h3>Order Total: ${getCartTotal(cart)}</h3>\n                    </>\n                  )}\n                  decimalDigits={2}\n                  displayType={\"text\"}\n                  thousandsSeparator={true}\n                />\n\n                <button\n                  disabled={\n                    isProcessing ||\n                    isDisabled ||\n                    hasSucceeded ||\n                    cart?.length == 0 ||\n                    !user\n                  }\n                >\n                  <span>{isProcessing ? <p>Processing...</p> : \"Buy Now\"}</span>\n                </button>\n              </div>\n\n              {error && <div>{error}</div>}\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Payment;\n"]},"metadata":{},"sourceType":"module"}