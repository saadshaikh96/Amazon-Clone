{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/saad/Desktop/Learning/Amazon Clone/amazon-clone/src/Payment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport CartItem from \"./CartItem\";\nimport \"./Payment.css\";\nimport { useStateValue } from \"./StateProvider\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport CurrencyFormat from \"react-currency-format\";\nimport { getCartTotal } from \"./reducer\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction Payment() {\n  _s();\n\n  const [{\n    cart,\n    user\n  }, dispatch] = useStateValue();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  const [disabled, setDisabled] = useState(true);\n  const [succeeded, setSucceeded] = useState(false);\n  const [clientSecret, setClientSecret] = useState(true);\n  const history = useHistory();\n  useEffect(() => {\n    /*stripe secret allows us to charge the customer. Need to generate everytime the cart changes. \n    Tells stripe something like \"Hey, I need to charge the customer $50\"*/\n    const getClientSecret = async () => {\n      const response = await axios({\n        method: \"post\",\n        //Stripe expects the currency in sub-units. So for dollars, it expects the total value in cents.\n        url: `/payments/create?total=${getCartTotal(cart) * 100}`\n      });\n      setClientSecret(response.data.clientSecret);\n    };\n\n    getClientSecret();\n  }, [cart]);\n\n  const processPayment = async e => {\n    e.preventDefault();\n    setProcessing(true);\n    const payload = stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    }).then(({\n      paymentIntent\n    }) => {\n      //paymentIntent is nothing but payment confirmation. It is Stripe's fancy lingo\n      setSucceeded(true);\n      setError(null);\n      setProcessing(false);\n      history.replace(\"/orders\");\n    });\n  };\n\n  const handleChange = e => {\n    setDisabled(e.empty);\n    setError(e.error ? e.error.message : \"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"payment\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"payment__container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Checkout (\", cart === null || cart === void 0 ? void 0 : cart.length, \" items)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"payment__section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"payment__title\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Delivery Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"payment__address\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: user === null || user === void 0 ? void 0 : user.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"444 3rd Ave\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"New York, NY\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"10016\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"payment__section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"payment__title\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Review items and delivery\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"payment__items\",\n          children: cart.map(items => /*#__PURE__*/_jsxDEV(CartItem, {\n            id: items.id,\n            title: items.title,\n            price: items.price,\n            image: items.image,\n            rating: items.rating\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"payment__section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"payment__title\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Payment Method\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"payment__details\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: processPayment,\n            children: [/*#__PURE__*/_jsxDEV(CardElement, {\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"payment__priceContainer\",\n              children: [/*#__PURE__*/_jsxDEV(CurrencyFormat, {\n                renderText: value => /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                    children: [\"Order Total: $\", getCartTotal(cart)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 113,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false),\n                decimalScale: 2,\n                displayType: \"text\",\n                thousandSeparator: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                disabled: processing || disabled || succeeded,\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: processing ? /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: \"Processing...\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 122,\n                    columnNumber: 39\n                  }, this) : \"Buy Now\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 15\n            }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Payment, \"GhODV2eNpX0uBeZHy7ppIFCGRlc=\", false, function () {\n  return [useStateValue, useStripe, useElements, useHistory];\n});\n\n_c = Payment;\nexport default Payment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Payment\");","map":{"version":3,"sources":["/Users/saad/Desktop/Learning/Amazon Clone/amazon-clone/src/Payment.js"],"names":["React","useState","useEffect","CartItem","useStateValue","CardElement","useStripe","useElements","CurrencyFormat","getCartTotal","axios","useHistory","Payment","cart","user","dispatch","stripe","elements","error","setError","processing","setProcessing","disabled","setDisabled","succeeded","setSucceeded","clientSecret","setClientSecret","history","getClientSecret","response","method","url","data","processPayment","e","preventDefault","payload","confirmCardPayment","payment_method","card","getElement","then","paymentIntent","replace","handleChange","empty","message","length","email","map","items","id","title","price","image","rating","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport CartItem from \"./CartItem\";\nimport \"./Payment.css\";\nimport { useStateValue } from \"./StateProvider\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport CurrencyFormat from \"react-currency-format\";\nimport { getCartTotal } from \"./reducer\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction Payment() {\n  const [{ cart, user }, dispatch] = useStateValue();\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  const [disabled, setDisabled] = useState(true);\n  const [succeeded, setSucceeded] = useState(false);\n\n  const [clientSecret, setClientSecret] = useState(true);\n\n  const history = useHistory();\n\n  useEffect(() => {\n    /*stripe secret allows us to charge the customer. Need to generate everytime the cart changes. \n    Tells stripe something like \"Hey, I need to charge the customer $50\"*/\n\n    const getClientSecret = async () => {\n      const response = await axios({\n        method: \"post\",\n        //Stripe expects the currency in sub-units. So for dollars, it expects the total value in cents.\n        url: `/payments/create?total=${getCartTotal(cart) * 100}`,\n      });\n      setClientSecret(response.data.clientSecret);\n    };\n    getClientSecret();\n  }, [cart]);\n\n  const processPayment = async (e) => {\n    e.preventDefault();\n    setProcessing(true);\n    const payload = stripe\n      .confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: elements.getElement(CardElement),\n        },\n      })\n      .then(({ paymentIntent }) => {\n        //paymentIntent is nothing but payment confirmation. It is Stripe's fancy lingo\n        setSucceeded(true);\n        setError(null);\n        setProcessing(false);\n\n        history.replace(\"/orders\");\n      });\n  };\n\n  const handleChange = (e) => {\n    setDisabled(e.empty);\n    setError(e.error ? e.error.message : \"\");\n  };\n\n  return (\n    <div className=\"payment\">\n      <div className=\"payment__container\">\n        <h1>Checkout ({cart?.length} items)</h1>\n        {/* payment section - address */}\n        <div className=\"payment__section\">\n          <div className=\"payment__title\">\n            <h3>Delivery Address</h3>\n          </div>\n          <div className=\"payment__address\">\n            <p>{user?.email}</p>\n            <p>444 3rd Ave</p>\n            <p>New York, NY</p>\n            <p>10016</p>\n          </div>\n        </div>\n\n        {/* payment section - cart items */}\n        <div className=\"payment__section\">\n          <div className=\"payment__title\">\n            <h3>Review items and delivery</h3>\n          </div>\n          <div className=\"payment__items\">\n            {cart.map((items) => (\n              <CartItem\n                id={items.id}\n                title={items.title}\n                price={items.price}\n                image={items.image}\n                rating={items.rating}\n              />\n            ))}\n          </div>\n        </div>\n\n        {/* payment section - card details */}\n        <div className=\"payment__section\">\n          <div className=\"payment__title\">\n            <h3>Payment Method</h3>\n          </div>\n          <div className=\"payment__details\">\n            {/* Stripe payment */}\n            <form onSubmit={processPayment}>\n              <CardElement onChange={handleChange} />\n              <div className=\"payment__priceContainer\">\n                <CurrencyFormat\n                  renderText={(value) => (\n                    <>\n                      <h3>Order Total: ${getCartTotal(cart)}</h3>\n                    </>\n                  )}\n                  decimalScale={2}\n                  displayType={\"text\"}\n                  thousandSeparator={true}\n                />\n\n                <button disabled={processing || disabled || succeeded}>\n                  <span>{processing ? <p>Processing...</p> : \"Buy Now\"}</span>\n                </button>\n              </div>\n\n              {error && <div>{error}</div>}\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Payment;\n"]},"metadata":{},"sourceType":"module"}