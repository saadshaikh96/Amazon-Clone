{"ast":null,"code":"import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import _regeneratorRuntime from\"/Users/saad/Desktop/Learning/Amazon Clone/amazon-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/saad/Desktop/Learning/Amazon Clone/amazon-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/saad/Desktop/Learning/Amazon Clone/amazon-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import CartItem from\"./CartItem\";import\"./Payment.css\";import{useStateValue}from\"./StateProvider\";import{CardElement,useStripe,useElements}from\"@stripe/react-stripe-js\";import CurrencyFormat from\"react-currency-format\";import{getCartTotal}from\"./reducer\";import axios from\"./axios\";import{useHistory}from\"react-router-dom\";import{db}from\"./firebase\";function Payment(){var _useStateValue=useStateValue(),_useStateValue2=_slicedToArray(_useStateValue,2),_useStateValue2$=_useStateValue2[0],cart=_useStateValue2$.cart,user=_useStateValue2$.user,dispatch=_useStateValue2[1];var stripe=useStripe();var elements=useElements();var _useState=useState(null),_useState2=_slicedToArray(_useState,2),error=_useState2[0],setError=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isProcessing=_useState4[0],setIsProcessing=_useState4[1];var _useState5=useState(true),_useState6=_slicedToArray(_useState5,2),isDisabled=_useState6[0],setIsDisabled=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),hasSucceeded=_useState8[0],setHasSucceeded=_useState8[1];var _useState9=useState(true),_useState10=_slicedToArray(_useState9,2),clientSecret=_useState10[0],setClientSecret=_useState10[1];var history=useHistory();useEffect(function(){/*stripe secret allows us to charge the customer. Need to generate everytime the cart changes. \n    Tells stripe something like \"Hey, I need to charge the customer $50\"*/var getClientSecret=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios({method:\"post\",//Stripe expects the currency in sub-units. So for dollars, it expects the total value in cents.\nurl:\"/payments/create?total=\".concat(Math.round(getCartTotal(cart)*100))});case 2:response=_context.sent;//   console.log(\"Data = \", response);\nsetClientSecret(response.data.clientSecret);case 4:case\"end\":return _context.stop();}}},_callee);}));return function getClientSecret(){return _ref.apply(this,arguments);};}();getClientSecret();},[cart]);//   console.log(\"Client secret is = \", clientSecret);\nvar processPayment=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e){var payload;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:e.preventDefault();setIsProcessing(true);_context2.next=4;return stripe.confirmCardPayment(clientSecret,{payment_method:{card:elements.getElement(CardElement)}}).then(function(_ref3){var paymentIntent=_ref3.paymentIntent;//paymentIntent is nothing but payment confirmation. It is Stripe's fancy lingo\ndb.collection(\"users\").doc(user===null||user===void 0?void 0:user.uid).collection(\"orders\").doc(paymentIntent.id).set({cart:cart,amount:paymentIntent.amount,createdAt:paymentIntent.created});setHasSucceeded(true);setError(null);setIsProcessing(false);dispatch({type:\"EMPTY_CART\"});history.replace(\"/orders\");});case 4:payload=_context2.sent;case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function processPayment(_x){return _ref2.apply(this,arguments);};}();var handleChange=function handleChange(e){setIsDisabled(e.empty);setError(e.error?e.error.message:\"\");};return/*#__PURE__*/_jsx(\"div\",{className:\"payment\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"payment__container\",children:[/*#__PURE__*/_jsxs(\"h1\",{children:[\"Checkout (\",cart===null||cart===void 0?void 0:cart.length,\" items)\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"payment__section\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"payment__title\",children:/*#__PURE__*/_jsx(\"h3\",{children:\"Delivery Address\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"payment__address\",children:[/*#__PURE__*/_jsx(\"p\",{children:user===null||user===void 0?void 0:user.email}),/*#__PURE__*/_jsx(\"p\",{children:\"444 3rd Ave\"}),/*#__PURE__*/_jsx(\"p\",{children:\"New York, NY\"}),/*#__PURE__*/_jsx(\"p\",{children:\"10016\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"payment__section\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"payment__title\",children:/*#__PURE__*/_jsx(\"h3\",{children:\"Review items and delivery\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"payment__items\",children:cart.map(function(items){return/*#__PURE__*/_jsx(CartItem,{id:items.id,title:items.title,price:items.price,image:items.image,rating:items.rating});})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"payment__section\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"payment__title\",children:/*#__PURE__*/_jsx(\"h3\",{children:\"Payment Method\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"payment__details\",children:/*#__PURE__*/_jsxs(\"form\",{onSubmit:processPayment,children:[/*#__PURE__*/_jsx(CardElement,{onChange:handleChange}),/*#__PURE__*/_jsxs(\"div\",{className:\"payment__priceContainer\",children:[/*#__PURE__*/_jsx(CurrencyFormat,{renderText:function renderText(value){return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"h3\",{children:[\"Order Total: $\",getCartTotal(cart)]})});},decimalDigits:2,displayType:\"text\",thousandsSeparator:true}),/*#__PURE__*/_jsx(\"button\",{disabled:isProcessing||isDisabled||hasSucceeded||(cart===null||cart===void 0?void 0:cart.length)==0||!user,children:/*#__PURE__*/_jsx(\"span\",{children:isProcessing?/*#__PURE__*/_jsx(\"p\",{children:\"Processing...\"}):\"Buy Now\"})})]}),error&&/*#__PURE__*/_jsx(\"div\",{children:error})]})})]})]})});}export default Payment;","map":{"version":3,"sources":["/Users/saad/Desktop/Learning/Amazon Clone/amazon-clone/src/Payment.js"],"names":["React","useState","useEffect","CartItem","useStateValue","CardElement","useStripe","useElements","CurrencyFormat","getCartTotal","axios","useHistory","db","Payment","cart","user","dispatch","stripe","elements","error","setError","isProcessing","setIsProcessing","isDisabled","setIsDisabled","hasSucceeded","setHasSucceeded","clientSecret","setClientSecret","history","getClientSecret","method","url","Math","round","response","data","processPayment","e","preventDefault","confirmCardPayment","payment_method","card","getElement","then","paymentIntent","collection","doc","uid","id","set","amount","createdAt","created","type","replace","payload","handleChange","empty","message","length","email","map","items","title","price","image","rating","value"],"mappings":"ipBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,QAAP,KAAqB,YAArB,CACA,MAAO,eAAP,CACA,OAASC,aAAT,KAA8B,iBAA9B,CACA,OAASC,WAAT,CAAsBC,SAAtB,CAAiCC,WAAjC,KAAoD,yBAApD,CACA,MAAOC,CAAAA,cAAP,KAA2B,uBAA3B,CACA,OAASC,YAAT,KAA6B,WAA7B,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,UAAT,KAA2B,kBAA3B,CACA,OAASC,EAAT,KAAmB,YAAnB,CAEA,QAASC,CAAAA,OAAT,EAAmB,oBACkBT,aAAa,EAD/B,sFACRU,IADQ,kBACRA,IADQ,CACFC,IADE,kBACFA,IADE,CACMC,QADN,oBAGjB,GAAMC,CAAAA,MAAM,CAAGX,SAAS,EAAxB,CACA,GAAMY,CAAAA,QAAQ,CAAGX,WAAW,EAA5B,CAJiB,cAMSN,QAAQ,CAAC,IAAD,CANjB,wCAMVkB,KANU,eAMHC,QANG,8BAOuBnB,QAAQ,CAAC,KAAD,CAP/B,yCAOVoB,YAPU,eAOIC,eAPJ,8BAQmBrB,QAAQ,CAAC,IAAD,CAR3B,yCAQVsB,UARU,eAQEC,aARF,8BASuBvB,QAAQ,CAAC,KAAD,CAT/B,yCASVwB,YATU,eASIC,eATJ,8BAWuBzB,QAAQ,CAAC,IAAD,CAX/B,0CAWV0B,YAXU,gBAWIC,eAXJ,gBAajB,GAAMC,CAAAA,OAAO,CAAGlB,UAAU,EAA1B,CAEAT,SAAS,CAAC,UAAM,CACd;AACJ,0EACI,GAAM4B,CAAAA,eAAe,0FAAG,sKACCpB,CAAAA,KAAK,CAAC,CAC3BqB,MAAM,CAAE,MADmB,CAE3B;AACAC,GAAG,kCAA4BC,IAAI,CAACC,KAAL,CAAWzB,YAAY,CAACK,IAAD,CAAZ,CAAqB,GAAhC,CAA5B,CAHwB,CAAD,CADN,QAChBqB,QADgB,eAMtB;AACAP,eAAe,CAACO,QAAQ,CAACC,IAAT,CAAcT,YAAf,CAAf,CAPsB,sDAAH,kBAAfG,CAAAA,eAAe,0CAArB,CAUAA,eAAe,GAChB,CAdQ,CAcN,CAAChB,IAAD,CAdM,CAAT,CAgBA;AAEA,GAAMuB,CAAAA,cAAc,2FAAG,kBAAOC,CAAP,kIACrBA,CAAC,CAACC,cAAF,GACAjB,eAAe,CAAC,IAAD,CAAf,CAFqB,uBAGCL,CAAAA,MAAM,CACzBuB,kBADmB,CACAb,YADA,CACc,CAChCc,cAAc,CAAE,CACdC,IAAI,CAAExB,QAAQ,CAACyB,UAAT,CAAoBtC,WAApB,CADQ,CADgB,CADd,EAMnBuC,IANmB,CAMd,eAAuB,IAApBC,CAAAA,aAAoB,OAApBA,aAAoB,CAC3B;AAEAjC,EAAE,CAACkC,UAAH,CAAc,OAAd,EACGC,GADH,CACOhC,IADP,SACOA,IADP,iBACOA,IAAI,CAAEiC,GADb,EAEGF,UAFH,CAEc,QAFd,EAGGC,GAHH,CAGOF,aAAa,CAACI,EAHrB,EAIGC,GAJH,CAIO,CACHpC,IAAI,CAAEA,IADH,CAEHqC,MAAM,CAAEN,aAAa,CAACM,MAFnB,CAGHC,SAAS,CAAEP,aAAa,CAACQ,OAHtB,CAJP,EAUA3B,eAAe,CAAC,IAAD,CAAf,CACAN,QAAQ,CAAC,IAAD,CAAR,CACAE,eAAe,CAAC,KAAD,CAAf,CAEAN,QAAQ,CAAC,CACPsC,IAAI,CAAE,YADC,CAAD,CAAR,CAIAzB,OAAO,CAAC0B,OAAR,CAAgB,SAAhB,EACD,CA5BmB,CAHD,QAGfC,OAHe,wEAAH,kBAAdnB,CAAAA,cAAc,6CAApB,CAkCA,GAAMoB,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACnB,CAAD,CAAO,CAC1Bd,aAAa,CAACc,CAAC,CAACoB,KAAH,CAAb,CACAtC,QAAQ,CAACkB,CAAC,CAACnB,KAAF,CAAUmB,CAAC,CAACnB,KAAF,CAAQwC,OAAlB,CAA4B,EAA7B,CAAR,CACD,CAHD,CAKA,mBACE,YAAK,SAAS,CAAC,SAAf,uBACE,aAAK,SAAS,CAAC,oBAAf,wBACE,mCAAe7C,IAAf,SAAeA,IAAf,iBAAeA,IAAI,CAAE8C,MAArB,aADF,cAGE,aAAK,SAAS,CAAC,kBAAf,wBACE,YAAK,SAAS,CAAC,gBAAf,uBACE,wCADF,EADF,cAIE,aAAK,SAAS,CAAC,kBAAf,wBACE,mBAAI7C,IAAJ,SAAIA,IAAJ,iBAAIA,IAAI,CAAE8C,KAAV,EADF,cAEE,kCAFF,cAGE,mCAHF,cAIE,4BAJF,GAJF,GAHF,cAgBE,aAAK,SAAS,CAAC,kBAAf,wBACE,YAAK,SAAS,CAAC,gBAAf,uBACE,iDADF,EADF,cAIE,YAAK,SAAS,CAAC,gBAAf,UACG/C,IAAI,CAACgD,GAAL,CAAS,SAACC,KAAD,qBACR,KAAC,QAAD,EACE,EAAE,CAAEA,KAAK,CAACd,EADZ,CAEE,KAAK,CAAEc,KAAK,CAACC,KAFf,CAGE,KAAK,CAAED,KAAK,CAACE,KAHf,CAIE,KAAK,CAAEF,KAAK,CAACG,KAJf,CAKE,MAAM,CAAEH,KAAK,CAACI,MALhB,EADQ,EAAT,CADH,EAJF,GAhBF,cAkCE,aAAK,SAAS,CAAC,kBAAf,wBACE,YAAK,SAAS,CAAC,gBAAf,uBACE,sCADF,EADF,cAIE,YAAK,SAAS,CAAC,kBAAf,uBAEE,cAAM,QAAQ,CAAE9B,cAAhB,wBACE,KAAC,WAAD,EAAa,QAAQ,CAAEoB,YAAvB,EADF,cAEE,aAAK,SAAS,CAAC,yBAAf,wBACE,KAAC,cAAD,EACE,UAAU,CAAE,oBAACW,KAAD,qBACV,sCACE,uCAAmB3D,YAAY,CAACK,IAAD,CAA/B,GADF,EADU,EADd,CAME,aAAa,CAAE,CANjB,CAOE,WAAW,CAAE,MAPf,CAQE,kBAAkB,CAAE,IARtB,EADF,cAYE,eACE,QAAQ,CACNO,YAAY,EACZE,UADA,EAEAE,YAFA,EAGA,CAAAX,IAAI,OAAJ,EAAAA,IAAI,SAAJ,QAAAA,IAAI,CAAE8C,MAAN,GAAgB,CAHhB,EAIA,CAAC7C,IANL,uBASE,sBAAOM,YAAY,cAAG,oCAAH,CAA0B,SAA7C,EATF,EAZF,GAFF,CA2BGF,KAAK,eAAI,qBAAMA,KAAN,EA3BZ,GAFF,EAJF,GAlCF,GADF,EADF,CA4ED,CAED,cAAeN,CAAAA,OAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport CartItem from \"./CartItem\";\nimport \"./Payment.css\";\nimport { useStateValue } from \"./StateProvider\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport CurrencyFormat from \"react-currency-format\";\nimport { getCartTotal } from \"./reducer\";\nimport axios from \"./axios\";\nimport { useHistory } from \"react-router-dom\";\nimport { db } from \"./firebase\";\n\nfunction Payment() {\n  const [{ cart, user }, dispatch] = useStateValue();\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const [error, setError] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isDisabled, setIsDisabled] = useState(true);\n  const [hasSucceeded, setHasSucceeded] = useState(false);\n\n  const [clientSecret, setClientSecret] = useState(true);\n\n  const history = useHistory();\n\n  useEffect(() => {\n    /*stripe secret allows us to charge the customer. Need to generate everytime the cart changes. \n    Tells stripe something like \"Hey, I need to charge the customer $50\"*/\n    const getClientSecret = async () => {\n      const response = await axios({\n        method: \"post\",\n        //Stripe expects the currency in sub-units. So for dollars, it expects the total value in cents.\n        url: `/payments/create?total=${Math.round(getCartTotal(cart) * 100)}`,\n      });\n      //   console.log(\"Data = \", response);\n      setClientSecret(response.data.clientSecret);\n    };\n\n    getClientSecret();\n  }, [cart]);\n\n  //   console.log(\"Client secret is = \", clientSecret);\n\n  const processPayment = async (e) => {\n    e.preventDefault();\n    setIsProcessing(true);\n    const payload = await stripe\n      .confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: elements.getElement(CardElement),\n        },\n      })\n      .then(({ paymentIntent }) => {\n        //paymentIntent is nothing but payment confirmation. It is Stripe's fancy lingo\n\n        db.collection(\"users\")\n          .doc(user?.uid)\n          .collection(\"orders\")\n          .doc(paymentIntent.id)\n          .set({\n            cart: cart,\n            amount: paymentIntent.amount,\n            createdAt: paymentIntent.created,\n          });\n\n        setHasSucceeded(true);\n        setError(null);\n        setIsProcessing(false);\n\n        dispatch({\n          type: \"EMPTY_CART\",\n        });\n\n        history.replace(\"/orders\");\n      });\n  };\n\n  const handleChange = (e) => {\n    setIsDisabled(e.empty);\n    setError(e.error ? e.error.message : \"\");\n  };\n\n  return (\n    <div className=\"payment\">\n      <div className=\"payment__container\">\n        <h1>Checkout ({cart?.length} items)</h1>\n        {/* payment section - address */}\n        <div className=\"payment__section\">\n          <div className=\"payment__title\">\n            <h3>Delivery Address</h3>\n          </div>\n          <div className=\"payment__address\">\n            <p>{user?.email}</p>\n            <p>444 3rd Ave</p>\n            <p>New York, NY</p>\n            <p>10016</p>\n          </div>\n        </div>\n\n        {/* payment section - cart items */}\n        <div className=\"payment__section\">\n          <div className=\"payment__title\">\n            <h3>Review items and delivery</h3>\n          </div>\n          <div className=\"payment__items\">\n            {cart.map((items) => (\n              <CartItem\n                id={items.id}\n                title={items.title}\n                price={items.price}\n                image={items.image}\n                rating={items.rating}\n              />\n            ))}\n          </div>\n        </div>\n\n        {/* payment section - card details */}\n        <div className=\"payment__section\">\n          <div className=\"payment__title\">\n            <h3>Payment Method</h3>\n          </div>\n          <div className=\"payment__details\">\n            {/* Stripe payment */}\n            <form onSubmit={processPayment}>\n              <CardElement onChange={handleChange} />\n              <div className=\"payment__priceContainer\">\n                <CurrencyFormat\n                  renderText={(value) => (\n                    <>\n                      <h3>Order Total: ${getCartTotal(cart)}</h3>\n                    </>\n                  )}\n                  decimalDigits={2}\n                  displayType={\"text\"}\n                  thousandsSeparator={true}\n                />\n\n                <button\n                  disabled={\n                    isProcessing ||\n                    isDisabled ||\n                    hasSucceeded ||\n                    cart?.length == 0 ||\n                    !user\n                  }\n                >\n                  <span>{isProcessing ? <p>Processing...</p> : \"Buy Now\"}</span>\n                </button>\n              </div>\n\n              {error && <div>{error}</div>}\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Payment;\n"]},"metadata":{},"sourceType":"module"}